class LRUCache
{
private:
    int size;
    list<int>lru;
    map<int,list<int>::iterator>mp;
    map<int,int>keyVal;
public:
    LRUCache(int cap):size(cap){}
    
    int get(int key)
    {
        if(mp.find(key)==mp.end())return -1;
        update(key);
        return keyVal[key];
    }
    
    void set(int key, int value)
    {
        if(lru.size()==size && mp.find(key)==mp.end())Remove();
        update(key);
        keyVal[key]=value;
    }
    void update(int key){
        if(mp.find(key)!=mp.end())lru.erase(mp[key]);
        lru.push_front(key);
        mp[key]=lru.begin();
    }
    void Remove(){
        mp.erase(lru.back());
        keyVal.erase(lru.back());
        lru.pop_back();
    }
};
